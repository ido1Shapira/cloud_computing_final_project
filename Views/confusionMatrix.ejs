<html lang="en">
<head>
	<meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Confusion Matrix</title>
    <link rel="stylesheet" href="style.css"/>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <a href="/" class="previous">&laquo; Previous</a>
    <% if (cars && cars.length) { %>
        <table class="car_table">
            <tr>
              <th>Car Id</th>
              <th>Predict exit</th>
              <th></th>
            </tr>
            <% cars.forEach((id) => { %>
                <% const index = cars.indexOf(id); %>
                <tr>
                    <th><%= id %></th>
                    <th><%= predicts[index] %></th>
                    <td> <div class="dropdown">
                        <button class="dropbtn">Car details</button>
                        <div class="dropdown-content">
                            <% var car_detail = cars_details[index] %>
                          <a href="#">Time road entry: <%= car_detail.Time %> </a>
                          <a href="#">Segment entry: <%= car_detail.Segment %></a>
                          <a href="#">Vehicle type: <%= car_detail.vehicle_type %></a>
                        </div>
                      </div>
                    </td>
                </tr>
              <% }) %>
      <% } %>

    <div id="dataView"></div>
    <form action="/trainModel" method="POST">
        <button type="submit" class="button"><span>train model</span></button>
    </form>
    <div style="display:inline-block; float:left;" id="container"></div>
    <div style="display:inline-block; float:left;" id="legend"></div>

    
    
	<script>
        var socket = io();
        socket.on('reload', function (data) {
            location.reload();
        });
        var margin = {top: 50, right: 50, bottom: 100, left: 100};

        function Matrix(options) {
                var width = 250,
                height = 250,
                data = options.data,
                container = options.container,
                labelsData = options.labels,
                startColor = options.start_color,
                endColor = options.end_color;

            var widthLegend = 100;

            if(!data){
                throw new Error('Please pass data');
            }

            if(!Array.isArray(data) || !data.length || !Array.isArray(data[0])){
                throw new Error('It should be a 2-D array');
            }

            var maxValue = d3.max(data, function(layer) { return d3.max(layer, function(d) { return d; }); });
            var minValue = d3.min(data, function(layer) { return d3.min(layer, function(d) { return d; }); });

            var numrows = data.length;
            var numcols = data[0].length;

            var svg = d3.select(container).append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            var background = svg.append("rect")
                .style("stroke", "black")
                .style("stroke-width", "2px")
                .attr("width", width)
                .attr("height", height);

            var x = d3.scale.ordinal()
                .domain(d3.range(numcols))
                .rangeBands([0, width]);

            var y = d3.scale.ordinal()
                .domain(d3.range(numrows))
                .rangeBands([0, height]);

            var colorMap = d3.scale.linear()
                .domain([minValue,maxValue])
                .range([startColor, endColor]);

            var row = svg.selectAll(".row")
                .data(data)
                .enter().append("g")
                .attr("class", "row")
                .attr("transform", function(d, i) { return "translate(0," + y(i) + ")"; });

            var cell = row.selectAll(".cell")
                .data(function(d) { return d; })
                    .enter().append("g")
                .attr("class", "cell")
                .attr("transform", function(d, i) { return "translate(" + x(i) + ", 0)"; });

            cell.append('rect')
                .attr("width", x.rangeBand())
                .attr("height", y.rangeBand())
                .style("stroke-width", 0);

            cell.append("text")
                .attr("dy", ".32em")
                .attr("x", x.rangeBand() / 2)
                .attr("y", y.rangeBand() / 2)
                .attr("text-anchor", "middle")
                .style("fill", function(d, i) { return d >= maxValue/2 ? 'white' : 'black'; })
                .text(function(d, i) { return d; });

            row.selectAll(".cell")
                .data(function(d, i) { return data[i]; })
                .style("fill", colorMap);

            var labels = svg.append('g')
                .attr('class', "labels");

            var columnLabels = labels.selectAll(".column-label")
                .data(labelsData)
                .enter().append("g")
                .attr("class", "column-label")
                .attr("transform", function(d, i) { return "translate(" + x(i) + "," + height + ")"; });

            columnLabels.append("line")
                .style("stroke", "black")
                .style("stroke-width", "1px")
                .attr("x1", x.rangeBand() / 2)
                .attr("x2", x.rangeBand() / 2)
                .attr("y1", 0)
                .attr("y2", 5);

            columnLabels.append("text")
                .attr("x", 30)
                .attr("y", y.rangeBand() / 2)
                .attr("dy", ".22em")
                .attr("text-anchor", "end")
                .attr("transform", "rotate(-60)")
                .text(function(d, i) { return d; });

            var rowLabels = labels.selectAll(".row-label")
                .data(labelsData)
            .enter().append("g")
                .attr("class", "row-label")
                .attr("transform", function(d, i) { return "translate(" + 0 + "," + y(i) + ")"; });

            rowLabels.append("line")
                .style("stroke", "black")
                .style("stroke-width", "1px")
                .attr("x1", 0)
                .attr("x2", -5)
                .attr("y1", y.rangeBand() / 2)
                .attr("y2", y.rangeBand() / 2);

            rowLabels.append("text")
                .attr("x", -8)
                .attr("y", y.rangeBand() / 2)
                .attr("dy", ".32em")
                .attr("text-anchor", "end")
                .text(function(d, i) { return d; });

            var key = d3.select("#legend")
            .append("svg")
            .attr("width", widthLegend)
            .attr("height", height + margin.top + margin.bottom);

            var legend = key
            .append("defs")
            .append("svg:linearGradient")
            .attr("id", "gradient")
            .attr("x1", "100%")
            .attr("y1", "0%")
            .attr("x2", "100%")
            .attr("y2", "100%")
            .attr("spreadMethod", "pad");

            legend
            .append("stop")
            .attr("offset", "0%")
            .attr("stop-color", endColor)
            .attr("stop-opacity", 1);

            legend
            .append("stop")
            .attr("offset", "100%")
            .attr("stop-color", startColor)
            .attr("stop-opacity", 1);

            key.append("rect")
            .attr("width", widthLegend/2-10)
            .attr("height", height)
            .style("fill", "url(#gradient)")
            .attr("transform", "translate(0," + margin.top + ")");

            var y = d3.scale.linear()
            .range([height, 0])
            .domain([minValue, maxValue]);

            var yAxis = d3.svg.axis()
            .scale(y)
            .orient("right");

            key.append("g")
            .attr("class", "y axis")
            .attr("transform", "translate(41," + margin.top + ")")
            .call(yAxis)

        }

        // The table generation function
        function tabulate(data, columns, left) {
            var table = d3.select("#dataView").append("table")
                    .attr("style", "margin-left: " + left +"px"),
                thead = table.append("thead"),
                tbody = table.append("tbody");

            // append the header row
            thead.append("tr")
                .selectAll("th")
                .data(columns)
                .enter()
                .append("th")
                    .text(function(column) { return column; });

            // create a row for each object in the data
            var rows = tbody.selectAll("tr")
                .data(data)
                .enter()
                .append("tr");

            // create a cell in each row for each column
            var cells = rows.selectAll("td")
                .data(function(row) {
                    return columns.map(function(column) {
                        return {column: column, value: row[column]};
                    });
                })
                .enter()
                .append("td")
                .attr("style", "font-family: Courier") // sets the font style
                    .html(function(d) { return d.value; });

            return table;
        }

        // Get confusionMatrix from server
        var confusionMatrix = JSON.parse('<%- JSON.stringify(confusionMatrix) %>');
        console.log("confusionMatrix:\n" + confusionMatrix);

        // Get predicts from server
        var predicts_list = JSON.parse('<%- JSON.stringify(predicts) %>');

        // count how many item in each value
        var occurrences = {1:0, 2:0, 3:0, 4:0, 5:0};
        for (var i = 0, j = predicts_list.length; i < j; i++) {
            occurrences[predicts_list[i]] = (occurrences[predicts_list[i]] || 0) + 1;
        }
        
        // Calculate accuracy
        var correct = 0;
        var worng = 0;
        for(i=0; i<confusionMatrix.length; i++) {
            for(j=0; j<confusionMatrix[i].length; j++) {
                if(i == j) {
                    correct += confusionMatrix[i][i];
                }
                else {
                    worng += confusionMatrix[i][j];
                }
            }
        }
        var accuracy = correct/(correct+worng);

        accuracy = Math.round(accuracy * 100) / 100

        var computedData = [];
        computedData.push({"ACCURACY":accuracy});

        // Calculate predicts
        var predictData = [];
        predictData.push({"Segment 1": occurrences[1], "Segment 2": occurrences[2], "Segment 3": occurrences[3], "Segment 4": occurrences[4], "Segment 5": occurrences[5]});
       
        var labels = ['Segment 1', 'Segment 2', 'Segment 3', 'Segment 4', 'Segment 5'];
		Matrix({
			container : '#container',
			data      : confusionMatrix,
			labels    : labels,
            start_color : '#ffffff',
            end_color : 'DodgerBlue'
		});
        
        if(JSON.stringify(occurrences) != "{\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0}") {
            tabulate(predictData, ["Segment 1", "Segment 2", "Segment 3", "Segment 4", "Segment 5"], margin.left + 200);
        }

		// rendering the table
        tabulate(computedData, ["ACCURACY"], margin.left);

        


	</script>
</body>